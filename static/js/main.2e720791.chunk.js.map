{"version":3,"sources":["utilities/utilities.js","features/cart/cartSlice.js","data.js","features/inventory/inventorySlice.js","features/inventory/Inventory.js","features/currencyFilter/CurrencyFilter.js","features/currencyFilter/currencyFilterSlice.js","features/cart/Cart.js","app/App.js","app/store.js","index.js"],"names":["calculatePrice","price","currency","getCurrencySymbol","currencyFilter","initialCart","inventoryData","name","img","currenciesData","initialInventory","Inventory","inventory","dispatch","useEffect","type","payload","length","id","map","inventoryItem","displayPrice","className","src","alt","toFixed","onClick","onClickHandler","CurrencyFilter","setCurrency","Cart","props","cart","cartElements","Object","keys","item","quantity","value","onChange","e","input","newQuantity","Number","changeItemQuantity","onInputChangeHandler","target","Array","_","index","total","totalUSD","forEach","itemName","calculateTotal","App","state","store","createStore","combineReducers","action","newItem","itemToUpdate","updatedItem","currentFilter","render","ReactDOM","getState","document","getElementById","subscribe"],"mappings":"iKAAO,SAASA,EAAeC,EAAOC,GAClC,OAAQA,GACN,IAAK,MACH,MAAe,IAARD,EACT,IAAK,MACH,OAAe,KAARA,EACT,QACE,OAAOA,GAYN,SAASE,EAAkBC,GAChC,OAAQA,GACN,IAAK,MACH,MAAO,IACT,IAAK,MACH,MAAO,SACT,IAAK,MACH,MAAO,IACT,QACE,MAAO,I,kBCTPC,EAAc,GCnBTC,EAAgB,CACzB,CAAEC,KAAM,kBAAmBN,MAAO,MAAOO,IAAK,iGAC9C,CAAED,KAAM,0BAA2BN,MAAO,MAAOO,IAAK,4FACtD,CAAED,KAAM,WAAYN,MAAO,MAAOO,IAAK,0FACvC,CAAED,KAAM,aAAcN,MAAO,MAAOO,IAAK,4FACzC,CAAED,KAAM,UAAWN,MAAO,MAAOO,IAAK,yFACtC,CAAED,KAAM,qBAAsBN,MAAO,MAAOO,IAAK,yFAGtCC,EAAiB,CAAC,MAAO,MAAO,OCAzCC,EAAmB,G,OCAZC,EAAY,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,UAAWR,EAA+B,EAA/BA,eAAgBS,EAAe,EAAfA,SAIrDC,qBAHgB,WACdD,EDRK,CACLE,KAAM,qBACNC,QAASV,MCQQ,CAACO,IAMpB,OAAyB,IAArBD,EAAUK,OACL,gFAGF,oBAAIC,GAAG,sBAAP,SAA8BN,EAAUO,KAE/C,SAA6BC,GAAgB,IACnCnB,EAAqBmB,EAArBnB,MAAOM,EAAca,EAAdb,KAAMC,EAAQY,EAARZ,IACfa,EAAerB,EAAeC,EAAOG,GAC3C,OACE,qBAAekB,UAAU,OAAzB,UACE,qBAAKC,IAAKf,EAAKgB,IAAK,KACpB,6BAAKjB,IACL,qBAAIe,UAAU,QAAd,UACGnB,EAAkBC,GAClBiB,EAAaI,QAAQ,GAFxB,IAE6BrB,KAE7B,wBACEsB,QAAS,kBAtBM,SAACN,GACtBP,EHfO,CACLE,KAAM,eACNC,QGaeI,IAqBIO,CAAeP,IAC9BE,UAAU,qBAFZ,2BAPOf,SCxBFqB,EAAiB,SAAC,GAAkC,IAAhCxB,EAA+B,EAA/BA,eAAgBS,EAAe,EAAfA,SAK/C,OACE,sBAAKK,GAAG,6BAAR,UACE,mDACCT,EAAeU,KAIpB,SAA8BjB,GAC5B,OACE,wBACEoB,UAAS,0BACPlB,IAAmBF,GAAY,YAGjCwB,QAAS,kBAlBQ,SAACxB,GACtBW,ECQuB,SAACX,GAC1B,MAAO,CACLa,KAAM,6BACNC,QAASd,GDXA2B,CAAY3B,IAiBFyB,CAAezB,IALhC,SAOGA,GAHIA,U,OEhBA4B,EAAO,SAACC,GAAW,IACtBC,EAAmCD,EAAnCC,KAAM5B,EAA6B2B,EAA7B3B,eAAgBS,EAAakB,EAAblB,SAgBxBoB,EAAeC,OAAOC,KAAKH,GAAMb,KAevC,SAAwBZ,GACtB,IAAM6B,EAAOJ,EAAKzB,GAElB,GAAsB,IAAlB6B,EAAKC,SACP,OAGF,OACE,+BACE,4BAAI9B,IACJ,wBACEe,UAAU,gBACVgB,MAAOF,EAAKC,SACZE,SAAU,SAACC,IA1CU,SAACjC,EAAMkC,GAElC,GAAc,KAAVA,EAAJ,CAKA,IAAMC,EAAcC,OAAOF,GAE3B5B,ENXgC,SAACN,EAAMmC,GACvC,MAAO,CACL3B,KAAM,0BACNC,QAAS,CACPT,KAAMA,EACNmC,YAAaA,IMMRE,CAAmBrC,EAAMmC,KAkC1BG,CAAqBtC,EAAMiC,EAAEM,OAAOR,QAJxC,SAOG,YAAIS,MAAM,KAAKZ,QAAQhB,KAAI,SAAC6B,EAAGC,GAAJ,OAC1B,wBAAoBX,MAAOW,EAA3B,SACGA,GADUA,UAVV1C,MAtBP2C,EPdC,SAAwBlB,EAAM9B,GACnC,IAAIiD,EAAW,EAIf,OAHAjB,OAAOC,KAAKH,GAAMoB,SAAQ,SAACC,GACzBF,GAAYnB,EAAKqB,GAAUpD,MAAQ+B,EAAKqB,GAAUhB,YAE7CrC,EAAemD,EAAUjD,GAAUuB,QAAQ,GOStC6B,CAAetB,EAAM5B,GAEnC,OACE,sBAAKc,GAAG,iBAAR,UACE,oBAAIA,GAAG,aAAP,SAAqBe,IACrB,qBAAIX,UAAU,QAAd,kBACQ,IACN,uBAAMA,UAAU,cAAhB,UACGnB,EAAkBC,GAAiB8C,EADtC,IAC8C9C,YC1BzCmD,EAAM,SAACxB,GAAW,IAErByB,EAAoBzB,EAApByB,MAAO3C,EAAakB,EAAblB,SAEf,OACE,gCACE,cAAC,EAAD,CACET,eAAgBoD,EAAMpD,eACtBS,SAAUA,IAGZ,cAAC,EAAD,CACED,UAAW4C,EAAM5C,UACjBR,eAAgBoD,EAAMpD,eACtBS,SAAUA,IAGZ,cAAC,EAAD,CACEmB,KAAMwB,EAAMxB,KACZ5B,eAAgBoD,EAAMpD,eACtBS,SAAUA,Q,OCtBL4C,EAAQC,YAAYC,YAAgB,CAC7C3B,KRcyB,WAAiC,IAAhCA,EAA+B,uDAAxB3B,EAAauD,EAAW,uCACzD,OAAQA,EAAO7C,MACb,IAAK,eAAiB,IAAD,EACK6C,EAAO5C,QAAvBT,EADW,EACXA,KAAMN,EADK,EACLA,MAGRoC,EAAWL,EAAKzB,GAAQyB,EAAKzB,GAAM8B,SAAW,EAAI,EAClDwB,EAAU,CAAE5D,QAAOoC,YAGzB,OAAO,2BACFL,GADL,kBAEGzB,EAAOsD,IAGZ,IAAK,0BAA4B,IAAD,EACAD,EAAO5C,QAA7BT,EADsB,EACtBA,KAAMmC,EADgB,EAChBA,YACRoB,EAAe9B,EAAKzB,GACpBwD,EAAW,2BACZD,GADY,IAEfzB,SAAUK,IAMZ,OAAO,2BACFV,GADL,kBAECzB,EAAOwD,IAGV,QACE,OAAO/B,IQ7CXpB,UNG4B,WAA2C,IAA1CA,EAAyC,uDAA7BF,EAAkBkD,EAAW,uCACxE,OAAQA,EAAO7C,MACb,IAAK,qBACH,OAAO6C,EAAO5C,QAEhB,QACE,OAAOJ,IMRToD,cHPiC,WAG/B,IAFJ5D,EAEG,uDAJyB,MAG5BwD,EACG,uCACH,OAAQA,EAAO7C,MACb,IAAK,6BACH,OAAO6C,EAAO5C,QAEhB,QACE,OAAOZ,OIJP6D,EAAS,WACbC,IAASD,OACP,cAAC,EAAD,CACET,MAAOC,EAAMU,WACbtD,SAAU4C,EAAM5C,WAGlBuD,SAASC,eAAe,UAG5BJ,IAGAR,EAAMa,UAAUL,K","file":"static/js/main.2e720791.chunk.js","sourcesContent":["export function calculatePrice(price, currency) {\r\n    switch (currency) {\r\n      case 'EUR':\r\n        return price * 0.86;\r\n      case 'CAD':\r\n        return price * 1.33;\r\n      default:\r\n        return price;\r\n    }\r\n  }\r\n\r\n  export function calculateTotal(cart, currency) {\r\n    let totalUSD = 0;\r\n    Object.keys(cart).forEach((itemName) => {\r\n      totalUSD += cart[itemName].price * cart[itemName].quantity;\r\n    });\r\n    return calculatePrice(totalUSD, currency).toFixed(2);\r\n  }\r\n\r\n  export function getCurrencySymbol(currencyFilter) {\r\n    switch (currencyFilter) {\r\n      case 'USD':\r\n        return '$';\r\n      case 'EUR':\r\n        return 'â‚¬';\r\n      case 'CAD':\r\n        return '$';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n","export const addItem = (itemToAdd) => {\r\n    return {\r\n      type: 'cart/addItem',\r\n      payload: itemToAdd,\r\n    };\r\n  };\r\n\r\n  // Create your changeItemQuantity action creator here.\r\n  export const changeItemQuantity = (name, newQuantity) => {\r\n    return {\r\n      type: 'cart/changeItemQuantity',\r\n      payload: {\r\n        name: name,\r\n        newQuantity: newQuantity\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  const initialCart = {};\r\n  export const cartReducer = (cart = initialCart, action) => {\r\n    switch (action.type) {\r\n      case 'cart/addItem': {\r\n        const { name, price } = action.payload;\r\n\r\n        // if the item already exists, increase the quantity by 1, otherwise set it to 1\r\n        const quantity = cart[name] ? cart[name].quantity + 1 : 1;\r\n        const newItem = { price, quantity };\r\n\r\n        // Add the new item to the cart (or replace it if it existed already)\r\n        return {\r\n          ...cart,\r\n          [name]: newItem\r\n        };\r\n      }\r\n      case 'cart/changeItemQuantity': {\r\n        const { name, newQuantity } = action.payload;\r\n        const itemToUpdate = cart[name];\r\n        const updatedItem = {\r\n          ...itemToUpdate,\r\n          quantity: newQuantity\r\n        };\r\n\r\n        // Create a copy of itemToUpdate and update the quantity prop.\r\n\r\n        // Return a copy of the cart with the updatedItem included.\r\n        return {\r\n          ...cart,\r\n        [name]: updatedItem\r\n        };\r\n      }\r\n      default: {\r\n        return cart;\r\n      }\r\n    }\r\n  };","export const inventoryData = [\r\n    { name: 'Hello World Hat', price: 23.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/hello-world-hat.jpg' },\r\n    { name: 'Learn From Home Joggers', price: 45.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/sweatpants.jpg' },\r\n    { name: 'Java Tee', price: 17.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/java-tee.jpg' },\r\n    { name: 'Python Tee', price: 17.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/python-tee.jpg' },\r\n    { name: 'SQL Tee', price: 17.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/sql-tee.jpg' },\r\n    { name: 'Hello World Hoodie', price: 49.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/hoodie.jpg' },\r\n  ];\r\n\r\n  export const currenciesData = ['USD', 'EUR', 'CAD'];","import { inventoryData } from '../../data';\r\n\r\nexport const loadData = (data) => {\r\n  return {\r\n    type: 'inventory/loadData',\r\n    payload: inventoryData,\r\n  };\r\n};\r\n\r\nconst initialInventory = [];\r\nexport const inventoryReducer = (inventory = initialInventory, action) => {\r\n  switch (action.type) {\r\n    case 'inventory/loadData': {\r\n      return action.payload;\r\n    }\r\n    default: {\r\n      return inventory;\r\n    }\r\n  }\r\n};\r\n","import React, { useEffect } from 'react';\r\n\r\nimport {\r\n  calculatePrice,\r\n  getCurrencySymbol,\r\n} from '../../utilities/utilities.js';\r\nimport { addItem } from '../cart/cartSlice.js';\r\nimport { loadData } from './inventorySlice';\r\n\r\nexport const Inventory = ({ inventory, currencyFilter, dispatch }) => {\r\n  const onMount = () => {\r\n    dispatch(loadData());\r\n  };\r\n  useEffect(onMount, [dispatch]);\r\n\r\n  const onClickHandler = (inventoryItem) => {\r\n    dispatch(addItem(inventoryItem));\r\n  };\r\n\r\n  if (inventory.length === 0) {\r\n    return <p> Sorry, no products are currently available... </p>;\r\n  }\r\n\r\n  return <ul id=\"inventory-container\">{inventory.map(createInventoryItem)}</ul>;\r\n\r\n  function createInventoryItem(inventoryItem) {\r\n    const { price, name, img } = inventoryItem;\r\n    const displayPrice = calculatePrice(price, currencyFilter);\r\n    return (\r\n      <li key={name} className=\"item\">\r\n        <img src={img} alt={''} />\r\n        <h3>{name}</h3>\r\n        <h3 className=\"price\">\r\n          {getCurrencySymbol(currencyFilter)}\r\n          {displayPrice.toFixed(2)} {currencyFilter}\r\n        </h3>\r\n        <button\r\n          onClick={() => onClickHandler(inventoryItem)}\r\n          className=\"add-to-cart-button\"\r\n        >\r\n          Add to Cart\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nimport { currenciesData } from '../../data.js';\r\nimport { setCurrency } from './currencyFilterSlice.js';\r\n\r\nexport const CurrencyFilter = ({ currencyFilter, dispatch }) => {\r\n  const onClickHandler = (currency) => {\r\n    dispatch(setCurrency(currency));\r\n  };\r\n\r\n  return (\r\n    <div id=\"currency-filters-container\">\r\n      <h3>Choose a currency</h3>\r\n      {currenciesData.map(createCurrencyButton)}\r\n    </div>\r\n  );\r\n\r\n  function createCurrencyButton(currency) {\r\n    return (\r\n      <button\r\n        className={`currency-button ${\r\n          currencyFilter === currency && 'selected'\r\n        }`}\r\n        key={currency}\r\n        onClick={() => onClickHandler(currency)}\r\n      >\r\n        {currency}\r\n      </button>\r\n    );\r\n  }\r\n};\r\n","const initialCurrencyFilter = 'USD';\r\nexport const currencyFilterReducer = (\r\n  currencyFilter = initialCurrencyFilter,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case 'currencyFilter/setCurrency': {\r\n      return action.payload;\r\n    }\r\n    default: {\r\n      return currencyFilter;\r\n    }\r\n  }\r\n};\r\n\r\nexport const setCurrency = (currency) => {\r\n  return {\r\n    type: 'currencyFilter/setCurrency',\r\n    payload: currency,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport {\r\n  calculateTotal,\r\n  getCurrencySymbol,\r\n} from '../../utilities/utilities.js';\r\nimport {changeItemQuantity} from './cartSlice';\r\n\r\nexport const Cart = (props) => {\r\n  const { cart, currencyFilter, dispatch } = props;\r\n\r\n  const onInputChangeHandler = (name, input) => {\r\n    // If the user enters a bad value...\r\n    if (input === '') {\r\n      return;\r\n    }\r\n\r\n    // Otherwise, convert the input into a number and pass it along as the newQuantity.\r\n    const newQuantity = Number(input);\r\n\r\n    dispatch(changeItemQuantity(name, newQuantity));\r\n\r\n  };\r\n\r\n  // Use the cart and currencyFilter slices to render their data.\r\n  const cartElements = Object.keys(cart).map(createCartItem);\r\n  const total = calculateTotal(cart, currencyFilter);\r\n\r\n  return (\r\n    <div id=\"cart-container\">\r\n      <ul id=\"cart-items\">{cartElements}</ul>\r\n      <h3 className=\"total\">\r\n        Total{' '}\r\n        <span className=\"total-value\">\r\n          {getCurrencySymbol(currencyFilter)}{total} {currencyFilter}\r\n        </span>\r\n      </h3>\r\n    </div>\r\n  );\r\n\r\n  function createCartItem(name) {\r\n    const item = cart[name];\r\n\r\n    if (item.quantity === 0) {\r\n      return;\r\n    }\r\n\r\n    return (\r\n      <li key={name}>\r\n        <p>{name}</p>\r\n        <select\r\n          className=\"item-quantity\"\r\n          value={item.quantity}\r\n          onChange={(e) => {\r\n            onInputChangeHandler(name, e.target.value);\r\n          }}\r\n        >\r\n          {[...Array(100).keys()].map((_, index) => (\r\n            <option key={index} value={index}>\r\n              {index}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </li>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { Inventory } from '../features/inventory/Inventory';\r\nimport { CurrencyFilter } from '../features/currencyFilter/CurrencyFilter.js';\r\nimport { Cart } from '../features/cart/Cart';\r\n// Import the Cart component here.\r\n\r\n// Render the Cart component below <Inventory />\r\nexport const App = (props) => {\r\n\r\n  const { state, dispatch } = props;\r\n\r\n  return (\r\n    <div>\r\n      <CurrencyFilter\r\n        currencyFilter={state.currencyFilter}\r\n        dispatch={dispatch}\r\n      />\r\n\r\n      <Inventory\r\n        inventory={state.inventory}\r\n        currencyFilter={state.currencyFilter}\r\n        dispatch={dispatch}\r\n      />\r\n\r\n      <Cart\r\n        cart={state.cart}\r\n        currencyFilter={state.currencyFilter}\r\n        dispatch={dispatch}\r\n      />\r\n\r\n    </div>\r\n  );\r\n};\r\n","import { createStore, combineReducers } from 'redux';\r\nimport { cartReducer } from '../features/cart/cartSlice';\r\nimport { inventoryReducer } from '../features/inventory/inventorySlice';\r\nimport { currencyFilterReducer } from '../features/currencyFilter/currencyFilterSlice';\r\n\r\nexport const store = createStore(combineReducers({\r\n    cart: cartReducer,\r\n    inventory: inventoryReducer,\r\n    currentFilter: currencyFilterReducer\r\n}));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from '../src/app/App';\nimport { store } from '../src/app/store';\n\n// Pass state and dispatch props to the <App /> component.\nconst render = () => {\n  ReactDOM.render(\n    <App\n      state={store.getState()}\n      dispatch={store.dispatch}\n\n    />,\n    document.getElementById('root')\n  )\n};\nrender();\n\n// Subscribe render to the store.\nstore.subscribe(render);"],"sourceRoot":""}